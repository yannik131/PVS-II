#!/usr/bin/java --source 21

import java.util.LinkedList;
import java.util.Random;
import java.lang.Thread;

public class App {
    public static LinkedList<Integer> list;
    public static Integer counter;

    public final static int RUN_TIME = 30000;
    public final static int SLEEP_TIME = 1000;

    static class MyThread extends Thread {
        int id;
        Random r;
        public MyThread(int id) {
            this.id = id;
            this.r = new Random();
        }

        @Override
        public void run() {
            if (id % 2 == 0) {
                consume();
            } else {
                produce();
            }
        }

        public void consume() {
            System.out.println("Thread " + this.id + " started to consume");
            while (true) {
                synchronized(App.list) {
                    if (App.list.size() > 0) {
                        int value = App.list.removeFirst();
                        System.out.println("Thread " + this.id + " consumed " + value);
                        System.out.println("New Size: " + App.list.size());
                    }
                }
                try {
                    this.sleep(this.r.nextInt(App.SLEEP_TIME)); // 10 Sek max Schlaf
                } catch (Exception e) {

                }
            }
        }

        public void produce() {
            System.out.println("Thread " + this.id + " started to produce");
            while(true) {
                synchronized(App.list) {
                    if (App.list.size() < 10) {
                        int newValue = App.counter++;
                        System.out.println("Thread " + this.id + " produced " + newValue);
                        System.out.println("New Size: " + App.list.size());
                        App.list.add(newValue);
                    }
                }
            }
        }
    }

    public static void main(String args[]) throws InterruptedException {
        if (args.length != 1) {
            System.out.println("Anzahl der Argumente != 1");
            return;
        }
        int threads;
        try {
            threads = Integer.parseInt(args[0]);
        } catch (Exception e) {
            System.out.println("Keine Zahl angegeben");
            return;
        }
        if ( threads < 2) {
            System.out.println("Zahl muss größer als 1 sein");
            return;
        }

        App.list = new LinkedList<Integer>(); 
        App.counter = 0;

        for(int i = 0; i < threads; i++) {
            MyThread thread = new MyThread(i);
            thread.start();
        }

        Thread.sleep(App.RUN_TIME);

        System.exit(0);
    }
}